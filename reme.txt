1.需要运行CodeDump_pie来解析dex，把CodeDump_pie放到data/data/自己的包名下，运行时需要给个权限chmod 766 CodeDump_none_pie，
    目的是提权（不然无法使用），命令依然是CodeDump_pie -d，这时候dex解析出的txt就很小。
2.把解压方式改成从zip中提取文件的方式，目的是不用sd卡读写权限和节省io和cpu内存消耗，
    判断lib内的so也只能采用提取是否有那些so的方式
3.解压和解析的操作全部在内存中处理，目前2m的dex解析结果是160k，所以限制大小为16m以内的dex文件（
    所有的dex文件相加小于等于16m才会处理，单个文件大于16m或N多dex文件大小总和大于16m不作处理，
    如果是多个dex文件还是和目前一样会把所有解析完成后的txt重新组合，排列mmm等的组合）。

6.每个解析过程在sd卡随机一个文件夹名称，/sdcard/SecurityEngine/我是随机名称/classes.dex，
    然后每次删除”我是随机名称“这个文件夹，随机名称用字母数字随机组合8位即可。
8.目前是客户端传一个“hash；包名；Context”，
    需要改成客户端传多个的情况，一个和多个的并存 list
9.客户端与sdk通讯传来的数据为“hash；包名；Context”，
    sdk只带hash和使用当前SDK的APP的包名查询服务端，如果库中如果有数据，
    则将数据（返回数据为“-1或0或1或2”，一个apk只会传递一个数字）回传客户端（结束），
    如果服务端无有效数据返回，则运行功能，解压解析apk，带着“hash；包名；版本号；证书MD5；
    文件MD5；aar版本号；使用当前SDK的APP的包名；解析生成的字符串”传给服务端，服务端算完后会返回结果“-1或0或1或2”给aar，
    aar将“-1或0或1或2”给客户端（结束）。需要考虑传了两个hash一个服务端查询库有，一个查询库中没有需要走解压解析的流程的情况。



能通过包名获取apk的位置么？可以提供给我们方法
aar有组件么？如果没有客户端会传Context过来，目的是获取版本号和证书MD5
如果可以的话 客户端只会传hash和包名和Context
通过包名获取apk的位置
然后我们还需要获取apk的版本号和证书MD5，这个方法客户端的小哥也给我
客户端给aar的是：hash，包名，Context
我们自己通过包名找到位置，通过客户端的Context获取版本号，证书MD5
我们最终传给服务端的是hash；包名；版本号；证书MD5；文件MD5（理论上是空的）；aar版本号；解析生成的字符串
代码混淆个~跪着说的